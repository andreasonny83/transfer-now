service: transfer-now
frameworkVersion: '3'
configValidationMode: error
package:
  individually: true
  patterns:
    - '!cli/**'

plugins:
  - serverless-offline
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  timeout: 10
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
          Resource: "arn:aws:s3:::${self:custom.bucket}/*"
        - Effect: Allow
          Action:
            - 'dynamodb:Query'
            - 'dynamodb:PutItem'
            - 'dynamodb:DeleteItem'
          Resource:
            - 'Fn::Join':
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'table/${self:custom.table}'
            - 'Fn::Join':
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'table/${self:custom.table}/*'

custom:
  debug: ${env:DEBUG, false}
  bucket: transfer-now
  table: transfer-now
  stage: ${self:provider.stage}
  maxFileSize: 20

resources:
  Resources:
    TransferNowBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
          Fn::Sub: ${self:custom.bucket}

    TransferNowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: machineId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: machineId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

functions:
  get:
    handler: src/get.handler
    description: "Retrieve a file with Transfer Now"
    environment:
      BUCKET_NAME: ${self:custom.bucket}
      TABLE_NAME: ${self:custom.table}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: get
          method: post
          cors: true
  put:
    handler: src/put.handler
    description: "Upload file with Transfer Now"
    environment:
      BUCKET_NAME: ${self:custom.bucket}
      TABLE_NAME: ${self:custom.table}
      MAX_FILE_SIZE_MB: ${self:custom.maxFileSize}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: put
          method: post
          cors: true
  list:
    handler: src/list.handler
    description: "List all user files with Transfer Now"
    environment:
      TABLE_NAME: ${self:custom.table}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: list
          method: post
          cors: true
  link:
    handler: src/link.handler
    description: "Generate short link to download files with Transfer Now"
    environment:
      TABLE_NAME: ${self:custom.table}
      BUCKET_NAME: ${self:custom.bucket}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: link
          method: post
          cors: true
  ttl:
    handler: src/ttl.handler
    description: "TimeToLive event handler from DynamoDB"
    environment:
      TABLE_NAME: ${self:custom.table}
      BUCKET_NAME: ${self:custom.bucket}
      DEBUG: ${self:custom.debug}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [TransferNowTable, StreamArn]
          batchSize: 100
          startingPosition: LATEST
          maximumRetryAttempts: 10
          enabled: true
  downloadFile:
    handler: src/downloadFile.handler
    description: "URL to download files from Transfer Now"
    environment:
      TABLE_NAME: ${self:custom.table}
      BUCKET_NAME: ${self:custom.bucket}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: downloadFile
          method: get
          cors: true