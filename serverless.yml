service: transfer-now
frameworkVersion: '3'
package:
  individually: true

plugins:
  - serverless-offline
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource:
        - "Fn::GetAtt": [ TransferNowTable, Arn ]

custom:
  debug: ${env:DEBUG, false}
  bucket: transfer-now
  table: transfer-now
  stage: ${self:provider.stage}
  maxFileSize: 20

resources:
  Resources:
    TransferNowBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
          Fn::Sub: ${self:custom.bucket}

    TransferNowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: machineId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: machineId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

functions:
  get:
    handler: src/get.handler
    description: "Upload Now Get method"
    environment:
      BUCKET_NAME: ${self:custom.bucket}
      TABLE_NAME: ${self:custom.table}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: get
          method: post
          cors: true
  upload:
    handler: src/upload.handler
    description: "Upload Now Upload method"
    environment:
      BUCKET_NAME: ${self:custom.bucket}
      TABLE_NAME: ${self:custom.table}
      MAX_FILE_SIZE_MB: ${self:custom.maxFileSize}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: upload
          method: post
          cors: true
  list:
    handler: src/list.handler
    description: "List all user files"
    environment:
      TABLE_NAME: ${self:custom.table}
      DEBUG: ${self:custom.debug}
    events:
      - http:
          path: list
          method: post
          cors: true
